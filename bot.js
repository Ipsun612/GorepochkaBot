require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { transcribeAudio } = require('./speechProcessor'); // <-- –ü–û–î–ö–õ–Æ–ß–ê–ï–ú –ù–ê–® –ú–û–î–£–õ–¨
const cors =require('cors');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Gemini API
if (!process.env.GEMINI_API_KEY) {
    console.error('‚ùå –û—à–∏–±–∫–∞: GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.');
    process.exit(1);
}
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ê–ë–û–ß–£–Æ –º–æ–¥–µ–ª—å. –û–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ —Ç–µ–∫—Å—Ç, –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ –∞—É–¥–∏–æ.
const GEMINI_MODEL_NAME = process.env.GEMINI_MODEL_NAME || "gemini-2.5-flash";
console.log(`üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: ${GEMINI_MODEL_NAME}`);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
const HISTORY_DIR = path.join(__dirname, 'history');
const IMAGES_DIR = path.join(__dirname, 'images');
if (!fs.existsSync(HISTORY_DIR)) fs.mkdirSync(HISTORY_DIR);
if (!fs.existsSync(IMAGES_DIR)) fs.mkdirSync(IMAGES_DIR);

// –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É 'bot_data' –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const DATA_DIR = path.join(__dirname, 'Logs');
if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR);

const WELCOME_MESSAGE_PATH = path.join(DATA_DIR, 'FirstMessage.txt');
const CHANGELOG_PATH = path.join(DATA_DIR, 'ChangeLog.txt');
const CREDITS_PATH = path.join(__dirname, 'Credits', 'credits.txt');

console.log(`‚ÑπÔ∏è –ü—É—Ç—å –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é: ${WELCOME_MESSAGE_PATH}`);
console.log(`‚ÑπÔ∏è –ü—É—Ç—å –∫ –ª–æ–≥—É –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${CHANGELOG_PATH}`);
// +++ –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–∏—Ç—Ä–∞–º +++
console.log(`‚ÑπÔ∏è –ü—É—Ç—å –∫ —Ç–∏—Ç—Ä–∞–º: ${CREDITS_PATH}`);


let welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.';
try {
    welcomeMessage = fs.readFileSync(WELCOME_MESSAGE_PATH, 'utf8');
    console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞');
} catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: ${error.message}`);
    console.log('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
}

let creditsText = '–¢–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª Credits/credits.txt';
try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
    if (fs.existsSync(CREDITS_PATH)) {
        creditsText = fs.readFileSync(CREDITS_PATH, 'utf8');
        console.log('‚úÖ –¢–∏—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
    } else {
        console.warn(`‚ö†Ô∏è –§–∞–π–ª —Ç–∏—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${CREDITS_PATH}`);
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∏ —Ñ–∞–π–ª-–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        fs.mkdirSync(path.dirname(CREDITS_PATH), { recursive: true });
        fs.writeFileSync(CREDITS_PATH, '**–¢–∏—Ç—Ä—ã**\n\n–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ [–í–∞—à–µ –ò–º—è].');
        creditsText = fs.readFileSync(CREDITS_PATH, 'utf8');
        console.log('‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ credits.txt. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ.');
    }
} catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏—Ç—Ä–æ–≤: ${error.message}`);
}

let systemPrompt = '';
try {
    const PROMPT_FILE_PATH = path.join(__dirname, 'Prompts/Gorepochka/gorepochka.txt');
    systemPrompt = fs.readFileSync(PROMPT_FILE_PATH, 'utf8');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: ${error.message}`);
}

const chatHistories = {};
const userStates = {};
const MAX_CHAT_SLOTS = 8;

function getDefaultSlotState() {
    return {
        interactions: 0,
        lastActive: 0,
        contextSize: 0,
        spamCounter: 0,
        relationshipLevel: 0,
        relationshipStatus: '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü',
        stressLevel: 0,
        isBanned: false,
        ignoreTimer: null,
        ignoreState: 'default',
        userBio: '', 
        isWaitingForBio: false, 
        characterDescription: '',
        isWaitingForCharacter: false,
        // +++ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π +++
        isGenerating: false,
        isWaitingForImportFile: false // –î–æ–±–∞–≤–∏–ª –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π —Ñ–ª–∞–≥ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    };
}

function getChatButtonText(chatId, slotIndex) {
    const slotState = userStates[chatId].slots[slotIndex];
    const isActive = userStates[chatId].activeChatSlot === slotIndex;
    const hasMessages = chatHistories[chatId][slotIndex].length > 0;

    let buttonText = '';

    if (isActive) buttonText += '‚û°Ô∏è ';
    if (slotState.isBanned) {
        buttonText += `–ß–∞—Ç ${slotIndex + 1} üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`;
    } else if (!hasMessages) {
        buttonText += `–°–ª–æ—Ç ${slotIndex + 1} ‚≠ê (–ü—É—Å—Ç–æ)`;
    } else {
        const icon = 'üìÅ';
        const rel = `‚ù§Ô∏è ${slotState.relationshipLevel} (${slotState.relationshipStatus})`;
        const stress = `‚õàÔ∏è ${slotState.stressLevel}`;
        buttonText += `–ß–∞—Ç ${slotIndex + 1} ${icon} ${rel} ${stress}`;
    }

    if (buttonText.length > 64) buttonText = buttonText.substring(0, 61) + '...';
    return buttonText;
}

// --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê: –õ–û–ì–ò–ö–ê –¢–ê–ô–ú–ï–†–ê "–ò–ì–ù–û–†–ê" ---

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
function clearIgnoreTimer(chatId, slotIndex) {
    if (userStates[chatId] && userStates[chatId].slots[slotIndex] && userStates[chatId].slots[slotIndex].ignoreTimer) {
        clearTimeout(userStates[chatId].slots[slotIndex].ignoreTimer);
        userStates[chatId].slots[slotIndex].ignoreTimer = null;
        console.log(`[–¢–∞–π–º–µ—Ä –¥–ª—è ${chatId}/${slotIndex}] –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
    }
}

function setIgnoreTimer(chatId, slotIndex) {
    // –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
    clearIgnoreTimer(chatId, slotIndex);

    // +++ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ +++
    if (!userStates[chatId]?.ignoreTimerEnabled) {
        console.log(`[–¢–∞–π–º–µ—Ä –¥–ª—è ${chatId}/${slotIndex}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`);
        return;
    }

    const slotState = userStates[chatId].slots[slotIndex];

    // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    if (slotState.isBanned) {
        return;
    }

    let minDelay, maxDelay;

    // –í—ã–±–∏—Ä–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (slotState.ignoreState === 'goodbye') {
        // –æ—Ç 2 –¥–æ 4 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        minDelay = 2 * 24 * 60 * 60 * 1000;
        maxDelay = 4 * 24 * 60 * 60 * 1000;
        console.log(`[–¢–∞–π–º–µ—Ä –¥–ª—è ${chatId}/${slotIndex}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ–ª–≥–∏–π —Ç–∞–π–º–µ—Ä (2-4 –¥–Ω—è) –∏–∑-–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ "goodbye"`);
    } else { // 'default' state
        // +++ –ò–ó–ú–ï–ù–ï–ù–û: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 19-24 —á–∞—Å–æ–≤ +++
        // –æ—Ç 19 –¥–æ 24 —á–∞—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        minDelay = 19 * 60 * 60 * 1000;
        maxDelay = 24 * 60 * 60 * 1000;
        console.log(`[–¢–∞–π–º–µ—Ä –¥–ª—è ${chatId}/${slotIndex}] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä (19-24 —á–∞—Å–∞)`);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    const delay = Math.floor(Math.random() * (maxDelay - minDelay + 1)) + minDelay;

    const timerId = setTimeout(async () => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
            if (!userStates[chatId] || !userStates[chatId].slots[slotIndex] || !(await isChatValid(chatId))) {
                console.log(`[–¢–∞–π–º–µ—Ä –¥–ª—è ${chatId}/${slotIndex}] –û—Ç–º–µ–Ω–µ–Ω: —á–∞—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.`);
                return;
            }
            
            console.log(`[–¢–∞–π–º–µ—Ä –¥–ª—è ${chatId}/${slotIndex}] –°–†–ê–ë–û–¢–ê–õ! –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã <–ò–≥–Ω–æ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>`);
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–º–∞–Ω–¥–æ–π
            await processUserText(chatId, '<–ò–≥–Ω–æ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>');
        
        } catch (error) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ "—É–±–∏–ª–∞" –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ setIgnoreTimer –¥–ª—è —á–∞—Ç–∞ ${chatId}/${slotIndex}:`, error.message);
        }
    }, delay);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–π–º–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–ª–æ—Ç–∞
    slotState.ignoreTimer = timerId;
}

// --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê: –õ–û–ì–ò–ö–ê –¢–ê–ô–ú–ï–†–ê "–ò–ì–ù–û–†–ê" ---




// +++ –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ó–ê–ú–ï–ù–´ +++
function initializeUser(chatId) {
    if (!userStates[chatId]) {
        userStates[chatId] = {
            hasCompletedWelcome: false,
            activeChatSlot: 0,
            slots: Array(MAX_CHAT_SLOTS).fill(null).map(() => getDefaultSlotState()),
            isDebugMode: false,
            timezoneOffset: null, // <--- –î–û–ë–ê–í–õ–ï–ù–û: –°–º–µ—â–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö (null = –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
            selectedModel: process.env.GEMINI_MODEL_NAME || "gemini-2.5-flash",
            ignoreTimerEnabled: true,
            currentMenu: 'main'
        };
    }
    if (!chatHistories[chatId]) {
        chatHistories[chatId] = Array(MAX_CHAT_SLOTS).fill(null).map(() => []);
    }
}


function getChatHistoryPath(chatId, slotIndex) {
    return path.join(HISTORY_DIR, `${chatId}_slot_${slotIndex}.json`);
}

function loadChatHistory(chatId, slotIndex) {
    const filePath = getChatHistoryPath(chatId, slotIndex);
    if (fs.existsSync(filePath)) {
        try {
            const data = fs.readFileSync(filePath, 'utf8');
            const history = JSON.parse(data);
            // –ü–†–û–í–ï–†–ö–ê –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• –î–õ–Ø –°–¢–ê–†–´–• –ò–°–¢–û–†–ò–ô
            if (userStates[chatId] && userStates[chatId].slots[slotIndex]) {
                 if (userStates[chatId].slots[slotIndex].relationshipStatus === undefined) {
                    userStates[chatId].slots[slotIndex].relationshipStatus = '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü';
                 }
            }
            return history;
        } catch (e) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ ${chatId}_slot_${slotIndex}:`, e.message);
            return [];
        }
    }
    return [];
}

function saveChatHistory(chatId, slotIndex, history) {
    const filePath = getChatHistoryPath(chatId, slotIndex);
    fs.writeFileSync(filePath, JSON.stringify(history, null, 2));
}

function clearChatHistoryAndState(chatId, slotIndex) {
    const filePath = getChatHistoryPath(chatId, slotIndex);
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
    }
    if (chatHistories[chatId] && chatHistories[chatId][slotIndex]) {
        chatHistories[chatId][slotIndex] = [];
    }
    if (userStates[chatId] && userStates[chatId].slots[slotIndex]) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        const currentUserBio = userStates[chatId].slots[slotIndex].userBio || '';
        const currentCharacterDescription = userStates[chatId].slots[slotIndex].characterDescription || '';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ—Ç–∞
        userStates[chatId].slots[slotIndex] = getDefaultSlotState();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä
        userStates[chatId].slots[slotIndex].userBio = currentUserBio;
        userStates[chatId].slots[slotIndex].characterDescription = currentCharacterDescription;
    }
}

if (!process.env.TELEGRAM_BOT_TOKEN) {
    console.error('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.');
    process.exit(1);
}
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
console.log('ü§ñ –ë–æ—Ç Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

const app = express();
app.use(cors());
app.use(express.json());
app.get('/', (req, res) => {
    res.send('Telegram LLM Bot —Å Google Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});
// --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –í–†–ï–ú–ï–ù–ò ---

// 1. –û—Ç–¥–∞–µ–º –Ω–∞—à—É –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
app.get('/tz-setup', (req, res) => {
    res.sendFile(path.join(__dirname, 'timezone.html'));
});

// 2. –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
app.post('/set-timezone', async (req, res) => {
    const { chatId, offset } = req.body;

    if (!chatId || offset === undefined) {
        return res.status(400).send('Missing chatId or offset');
    }

    try {
        initializeUser(chatId); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ
        userStates[chatId].timezoneOffset = parseInt(offset, 10);

        console.log(`[–í—Ä–µ–º—è] –î–ª—è —á–∞—Ç–∞ ${chatId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º ${offset} –º–∏–Ω—É—Ç.`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç
        await bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! ‚ú® –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –±—ã–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –¢–µ–ø–µ—Ä—å, –ì–æ—Ä–µ–ø–æ—á–∫–∞ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ —É –≤–∞—Å —É—Ç—Ä–æ, –∞ –∫–æ–≥–¥–∞ –Ω–æ—á—å.');
        
        // –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        await processUserText(chatId, '<–í—Ä–µ–º—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ>');

        res.status(200).send('Timezone updated');

    } catch (e) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏:", e.message);
        res.status(500).send('Internal server error');
    }
});

// --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –í–†–ï–ú–ï–ù–ò ---


async function isChatValid(chatId) {
    try {
        const chat = await bot.getChat(chatId);
        return chat && !chat.pinned_message;
    } catch (error) {
        if (error.response?.body?.error_code === 403) {
            console.error(`‚ùå –ß–∞—Ç ${chatId} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)`);
            if (userStates[chatId]) delete userStates[chatId];
            if (chatHistories[chatId]) delete chatHistories[chatId];
            return false;
        }
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Ç–∞ ${chatId}:`, error.message);
        return false;
    }
}


async function sendRelationshipStats(bot, chatId, slotState) {
    if (!slotState) return;
    // +++ –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –º—ã –±–µ—Ä–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∞ –Ω–µ –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ.
    const statsMessage = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ß–∞—Ç ${userStates[chatId] ? userStates[chatId].activeChatSlot + 1 : 'N/A'}):
  –£—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π: ${slotState.relationshipLevel} (${slotState.relationshipStatus})
  –°—Ç—Ä–µ—Å—Å: ${slotState.stressLevel}`;
    try {
        if (!(await isChatValid(chatId))) return;
        await bot.sendMessage(chatId, statsMessage);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}, —Å–ª–æ—Ç ${userStates[chatId] ? userStates[chatId].activeChatSlot : 'N/A'}`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (${chatId}):`, error.message);
    }
}

const showWelcomeMessage = async (chatId) => {
    const options = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è', callback_data: 'start_chat' }]
            ]
        },
        parse_mode: 'Markdown'
    };
    try {
        if (!(await isChatValid(chatId))) return;
        await bot.sendMessage(chatId, welcomeMessage, options);
    } catch (error) {
        if (error.response?.body?.error_code === 403) {
            console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
            if (userStates[chatId]) delete userStates[chatId];
            if (chatHistories[chatId]) delete chatHistories[chatId];
            return;
        }
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (${chatId}):`, error.message);
    }
};

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        if (!(await isChatValid(chatId))) return;
        initializeUser(chatId);
        userStates[chatId].hasCompletedWelcome = false;
        await showWelcomeMessage(chatId);
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –æ—Ç–ø—Ä–∞–≤–∏–ª /start`);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ /start (${chatId}):`, error.message);
    }
});

function getReplyKeyboard(chatId) {
    const userState = userStates[chatId];
    if (!userState) return { remove_keyboard: true };

    const reminderButtonText = userState.ignoreTimerEnabled
        ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
        : 'üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è';

    // +++ –ù–û–í–´–ô –ë–õ–û–ö: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ +++
    const timeButtonText = userState.timezoneOffset !== null
        ? 'üö´ –ó–∞–±—ã—Ç—å –≤—Ä–µ–º—è'
        : '‚è∞ –°–∏–Ω—Ö—Ä. –≤—Ä–µ–º—è';
    // +++ –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê +++

    let keyboard;

    switch (userState.currentMenu) {
        case 'main_settings':
            keyboard = [
                [{ text: 'üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é' }, { text: 'üìù –ó–∞–¥–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä' }],
                // +++ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É +++
                [{ text: timeButtonText }, { text: 'ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å' }],
                [{ text: reminderButtonText }],
                [{ text: 'üîô –ù–∞–∑–∞–¥' }]
            ];
            break;

        // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ case –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
        
        case 'advanced_settings':
            keyboard = [
                [{ text: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç' }, { text: 'üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç' }],
                [{ text: 'üõ†Ô∏è –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥' }]
            ];
            break;

        case 'info':
            keyboard = [
                [{ text: 'üìÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è' }, { text: '‚ÑπÔ∏è –¢–∏—Ç—Ä—ã' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥' }]
            ];
            break;

        case 'main':
        default:
            keyboard = [
                [{ text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é' }, { text: 'üîÑ –í—ã–±—Ä–∞—Ç—å —á–∞—Ç' }],
                [{ text: '‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' }],
                [{ text: 'üõ†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' }],
                [{ text: '‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' }]
            ];
            break;
    }

    return { keyboard, resize_keyboard: true };
}


// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback_query –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    try {
        if (!(await isChatValid(chatId))) return;
        initializeUser(chatId);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        if (data.startsWith('select_model_')) {
            const newModel = data.replace('select_model_', '');
            const userState = userStates[chatId];
            
            if (userState.selectedModel === newModel) {
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!', show_alert: true });
                return;
            }

            userState.selectedModel = newModel;
            console.log(`[–ú–æ–¥–µ–ª—å] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —Å–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –Ω–∞ ${newModel}`);

            let confirmationMessage = '';
            if (newModel.includes('pro')) {
                confirmationMessage = '‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º—É—é –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å, –Ω–æ –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–ª–≥–æ –∂–¥–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.';
            } else {
                confirmationMessage = '‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ flash –≤–µ—Ä—Å–∏—é –ò–ò, –æ–Ω–∞ –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ —á—É—Ç—å –º–µ–Ω–µ–µ –º–æ—â–Ω–∞—è.';
            }

            await bot.answerCallbackQuery(callbackQuery.id, { text: `–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newModel}` });
            await bot.editMessageText(confirmationMessage, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —á–∞—Ç–∞
        if (data === 'start_chat') {
            userStates[chatId].hasCompletedWelcome = true;
            await bot.answerCallbackQuery(callbackQuery.id);
            await bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            });
            // +++ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ +++
            await bot.sendMessage(chatId, `–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å (–≤ —á–∞—Ç–µ 1/${MAX_CHAT_SLOTS}). –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞.`, {
                reply_markup: getReplyKeyboard(chatId)
            });
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è"`);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–æ–≤
        if (data.startsWith('switch_chat_')) {
            const slotIndex = parseInt(data.split('_')[2]);
            if (slotIndex >= 0 && slotIndex < MAX_CHAT_SLOTS) {
                const oldSlotIndex = userStates[chatId].activeChatSlot;
                clearIgnoreTimer(chatId, oldSlotIndex);
                if (userStates[chatId].slots[oldSlotIndex].interactions > 0) {
                    setIgnoreTimer(chatId, oldSlotIndex);
                }

                userStates[chatId].activeChatSlot = slotIndex;
                if (chatHistories[chatId][slotIndex].length === 0 && fs.existsSync(getChatHistoryPath(chatId, slotIndex))) {
                    chatHistories[chatId][slotIndex] = loadChatHistory(chatId, slotIndex);
                }

                clearIgnoreTimer(chatId, slotIndex);

                await bot.answerCallbackQuery(callbackQuery.id, { text: `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —á–∞—Ç ${slotIndex + 1}` });
                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                await bot.sendMessage(chatId, `–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —á–∞—Ç ${slotIndex + 1}.`, {
                    reply_markup: settingsReplyKeyboard
                });
                console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —á–∞—Ç ${slotIndex + 1}`);
            } else {
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞', show_alert: true });
            }
            return;
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ callback_query (${chatId}):`, error.message);
        try {
            await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert: true });
        } catch (e) { /* ignore */ }
    }
});

function extractAndRemoveCommands(text, slotState) { // isDebugMode –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
    const patterns = [
        {
            regex: /<–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è\s*=\s*(-?\d+)>/g,
            action: (value) => {
                const newValue = parseInt(value, 10);
                slotState.relationshipLevel = Math.max(-100, Math.min(100, newValue));
            }
        },
        { regex: /<–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –Ω–∞:\s*(.*?)>/g, action: (status) => slotState.relationshipStatus = status.trim() },
        {
            regex: /<–°—Ç—Ä–µ—Å—Å\s*=\s*(\d+)>/g,
            action: (value) => {
                const newValue = parseInt(value, 10);
                slotState.stressLevel = Math.max(0, Math.min(100, newValue));
            }
        },
        { regex: /<–î–∞—Ç—å –±–∞–Ω>/g, action: () => slotState.isBanned = true },
        { regex: /<–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—â–∞–ª—Å—è>/g, action: () => { slotState.ignoreState = 'goodbye'; console.log(`–°—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–≥–æ –∏–∑ —á–∞—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'goodbye'`); } },
        { regex: /<–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Ç–∏>/g, action: () => { slotState.ignoreState = 'default'; console.log(`–°—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–≥–æ –∏–∑ —á–∞—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'default'`); } },
    ];

    // –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞.
    // –ú—ã –ù–ï –∏–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç, –∞ —Ç–æ–ª—å–∫–æ —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ.
    patterns.forEach(pattern => {
        const regex = new RegExp(pattern.regex.source, 'g');
        let match;
        while ((match = regex.exec(text)) !== null) {
            const value = match.length > 1 ? match[1] : match[0];
            pattern.action(value);
        }
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π, –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç.
    // –í—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–≥–æ–≤ –±—É–¥–µ—Ç –≤ sendSplitMessage.
    return text;
}

// +++ –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ó–ê–ú–ï–ù–´ +++
// +++ –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ó–ê–ú–ï–ù–´ +++
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    initializeUser(chatId);

    const activeSlotIndex = userStates[chatId].activeChatSlot;
    const slotState = userStates[chatId].slots[activeSlotIndex];
    const userState = userStates[chatId];
    const userInput = msg.text;

    if (!userInput) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–¥–∏–∞
        if (msg.animation || msg.photo || (msg.document && msg.document.mime_type.startsWith('image/')) || msg.sticker || msg.voice) {
           // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –±—É–¥–µ—Ç –Ω–∏–∂–µ
        } else {
            return;
        }
    }

    // --- –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –°–û–°–¢–û–Ø–ù–ò–ô (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞) ---
    // –≠—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ—é—Ç –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (slotState.isWaitingForBio) {
        // ... (–≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —è –≤–∫–ª—é—á–∞—é –µ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
        if (userInput.toLowerCase() === '/cancel') {
            slotState.isWaitingForBio = false;
            await bot.sendMessage(chatId, '‚úÖ –í–≤–æ–¥ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.', { reply_markup: getReplyKeyboard(chatId) });
            return;
        }
        const bioText = userInput;
        slotState.isWaitingForBio = false;
        if (bioText.toLowerCase() === 'erase') {
            slotState.userBio = '';
            clearChatHistoryAndState(chatId, activeSlotIndex);
            await bot.sendMessage(chatId, '‚úÖ –¢–≤–æ—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è —Å—Ç—ë—Ä—Ç–∞. –ù–∞—à –¥–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω.', { reply_markup: getReplyKeyboard(chatId) });
            return;
        }
        if (bioText.length > 700) {
            await bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è (–±–æ–ª—å—à–µ 700 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.', { reply_markup: getReplyKeyboard(chatId) });
            slotState.isWaitingForBio = true;
            return;
        }
        slotState.userBio = bioText;
        clearChatHistoryAndState(chatId, activeSlotIndex);
        await bot.sendMessage(chatId, '‚úÖ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! **–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω**, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.', { reply_markup: getReplyKeyboard(chatId), parse_mode: 'Markdown' });
        return;
    }
    if (slotState.isWaitingForCharacter) {
        // ... (–≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if (userInput.toLowerCase() === '/cancel') {
            slotState.isWaitingForCharacter = false;
            await bot.sendMessage(chatId, '‚úÖ –í–≤–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.', { reply_markup: getReplyKeyboard(chatId) });
            return;
        }
        const characterText = userInput;
        slotState.isWaitingForCharacter = false;
        if (characterText.toLowerCase() === 'erase') {
            slotState.characterDescription = '';
            clearChatHistoryAndState(chatId, activeSlotIndex);
            await bot.sendMessage(chatId, '‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä —Å–±—Ä–æ—à–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É. **–î–∏–∞–ª–æ–≥ –æ—á–∏—â–µ–Ω.**', { reply_markup: getReplyKeyboard(chatId), parse_mode: 'Markdown' });
            return;
        }
        if (characterText.length > 400) {
            await bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–±–æ–ª—å—à–µ 400 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', { reply_markup: getReplyKeyboard(chatId) });
            slotState.isWaitingForCharacter = true;
            return;
        }
        slotState.characterDescription = characterText;
        clearChatHistoryAndState(chatId, activeSlotIndex);
        await bot.sendMessage(chatId, '‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä –∏–∑–º–µ–Ω—ë–Ω! **–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω**, —á—Ç–æ–±—ã —è –≤–æ—à–ª–∞ –≤ —Ä–æ–ª—å.', { reply_markup: getReplyKeyboard(chatId), parse_mode: 'Markdown' });
        return;
    }
    if (slotState.isWaitingForImportFile) {
        // ... (–≠—Ç–æ—Ç –±–ª–æ–∫ –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if (userInput && userInput.toLowerCase() === '/cancel') {
            slotState.isWaitingForImportFile = false;
            await bot.sendMessage(chatId, '‚úÖ –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.', { reply_markup: getReplyKeyboard(chatId) });
            return;
        }
        await processImportFile(bot, msg);
        return;
    }

    // --- –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–î–ò–ê–§–ê–ô–õ–û–í ---
    if (msg.animation || msg.photo || (msg.document && msg.document.mime_type.startsWith('image/')) || msg.sticker || msg.voice) {
        if (!userState.hasCompletedWelcome) {
            await showWelcomeMessage(chatId);
            return;
        }
        try {
            slotState.isGenerating = true;
            if (msg.animation) await handleAnimatedMedia(bot, msg);
            else if (msg.photo || (msg.document && msg.document.mime_type.startsWith('image/')) || msg.sticker) await handleVisualMedia(bot, msg);
            else if (msg.voice) await handleVoiceMessage(msg);
        } finally {
            slotState.isGenerating = false;
        }
        return;
    }

    if (!(await isChatValid(chatId))) return;

    // --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ù–ê–í–ò–ì–ê–¶–ò–ò –ü–û –ú–ï–ù–Æ –ò –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î ---
    const commandHandlers = {
        // --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ---
        '‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏': async () => {
            userState.currentMenu = 'main_settings';
            await bot.sendMessage(chatId, '–†–∞–∑–¥–µ–ª: –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', { reply_markup: getReplyKeyboard(chatId) });
        },
        'üõ†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏': async () => {
            userState.currentMenu = 'advanced_settings';
            await bot.sendMessage(chatId, '–†–∞–∑–¥–µ–ª: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', { reply_markup: getReplyKeyboard(chatId) });
        },
        '‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ': async () => {
            userState.currentMenu = 'info';
            await bot.sendMessage(chatId, '–†–∞–∑–¥–µ–ª: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', { reply_markup: getReplyKeyboard(chatId) });
        },
        'üîô –ù–∞–∑–∞–¥': async () => {
            userState.currentMenu = 'main';
            await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.', { reply_markup: getReplyKeyboard(chatId) });
        },
        // --- –ö–æ–º–∞–Ω–¥—ã ---
        'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é': async () => {
            clearChatHistoryAndState(chatId, activeSlotIndex);
            clearIgnoreTimer(chatId, activeSlotIndex);
            await bot.sendMessage(chatId, `–ß–∞—Ç ${activeSlotIndex + 1} –æ—á–∏—â–µ–Ω üóëÔ∏è.`, { reply_markup: getReplyKeyboard(chatId) });
        },
        'üîÑ –í—ã–±—Ä–∞—Ç—å —á–∞—Ç': async () => {
            const keyboard = { /* ... –∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ ... */ };
             await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:', { reply_markup: {
                keyboard: [
                    [{ text: getChatButtonText(chatId, 0) }, { text: getChatButtonText(chatId, 1) }, { text: getChatButtonText(chatId, 2) }],
                    [{ text: getChatButtonText(chatId, 3) }, { text: getChatButtonText(chatId, 4) }, { text: getChatButtonText(chatId, 5) }],
                    [{ text: getChatButtonText(chatId, 6) }, { text: getChatButtonText(chatId, 7) }, { text: 'üîô –ù–∞–∑–∞–¥' }]
                ],
                resize_keyboard: true,
            }});
        },
       
		'‚è∞ –°–∏–Ω—Ö—Ä. –≤—Ä–µ–º—è': async () => {
			if (!process.env.WEB_APP_URL) {
				console.error('‚ùå –û—à–∏–±–∫–∞: WEB_APP_URL –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!');
				await bot.sendMessage(chatId, 'üö´ –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–ª WEB_APP_URL. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
				return;
			}
			const url = `${process.env.WEB_APP_URL}/tz-setup?chatId=${chatId}`;
			await bot.sendMessage(chatId, '–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–∞—à–∞ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É. –ì–æ—Ä–µ–ø–æ—á–∫–æ–π –∫–ª—è–Ω—ë–º—Å—è, —á—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –Ω–∏–∫–∞–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω—É–∂–Ω–æ *–∫—Ä–æ–º–µ –≤–∞—à–∏—Ö —Ç—Ä—ë—Ö —Ü–∏—Ñ—Ä –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ*', {
				reply_markup: {
					inline_keyboard: [
						[{ text: '–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', url: url }]
					]
				}
			});
		},
		'üö´ –ó–∞–±—ã—Ç—å –≤—Ä–µ–º—è': async () => {
			if (userState.timezoneOffset !== null) {
				userState.timezoneOffset = null;
				await bot.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, —è –∑–∞–±—ã–ª–∞ —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –µ–≥–æ —É—á–∏—Ç—ã–≤–∞—Ç—å.', { reply_markup: getReplyKeyboard(chatId) });
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ò–ò —É–∑–Ω–∞–ª –æ–± —ç—Ç–æ–º
				await processUserText(chatId, '<–í—Ä–µ–º—è –∑–∞–±—ã—Ç–æ>');
			}
		},
		'üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é': async () => {
            slotState.isWaitingForBio = true;
            await bot.sendMessage(chatId, '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é (–¥–æ 700 —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ "Erase". –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.', { reply_markup: getReplyKeyboard(chatId) });
        },
        'üìù –ó–∞–¥–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä': async () => {
            slotState.isWaitingForCharacter = true;
            await bot.sendMessage(chatId, '–ó–∞–¥–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ì–æ—Ä–µ–ø–æ—á–∫–µ (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤). –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.', { reply_markup: getReplyKeyboard(chatId) });
        },
        'ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å': async () => {
             await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:', {
                reply_markup: {
                    keyboard: [[{ text: 'üß† gemini-2.5-pro' }, { text: '‚ö° gemini-2.5-flash' }],[{ text: 'üîô –ù–∞–∑–∞–¥' }]],
                    resize_keyboard: true, one_time_keyboard: true
                }
            });
        },
        'üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': async () => {
            userState.ignoreTimerEnabled = false;
            for (let i = 0; i < MAX_CHAT_SLOTS; i++) clearIgnoreTimer(chatId, i);
            await bot.sendMessage(chatId, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.', { reply_markup: getReplyKeyboard(chatId) });
        },
        'üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': async () => {
            userState.ignoreTimerEnabled = true;
            await bot.sendMessage(chatId, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.', { reply_markup: getReplyKeyboard(chatId) });
        },
        'üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç': async () => {
            await handleExport(bot, chatId);
        },
        'üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç': async () => {
            slotState.isWaitingForImportFile = true;
            await bot.sendMessage(chatId, '–ü—Ä–∏—à–ª–∏ JSON-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.', { reply_markup: getReplyKeyboard(chatId) });
        },
        'üõ†Ô∏è –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏': async () => {
            userState.isDebugMode = !userState.isDebugMode;
            await bot.sendMessage(chatId, userState.isDebugMode ? "‚úÖ –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏." : "‚òëÔ∏è –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω.", { reply_markup: getReplyKeyboard(chatId) });
        },
        'üìÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è': async () => {
            try {
                const changelog = fs.readFileSync(CHANGELOG_PATH, 'utf8');
                await bot.sendMessage(chatId, `üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n${changelog}`, { parse_mode: 'Markdown', reply_markup: getReplyKeyboard(chatId) });
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π.', { reply_markup: getReplyKeyboard(chatId) });
            }
        },
        '‚ÑπÔ∏è –¢–∏—Ç—Ä—ã': async () => {
            await bot.sendMessage(chatId, creditsText, { parse_mode: 'Markdown', reply_markup: getReplyKeyboard(chatId) });
        },
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
    if (commandHandlers[userInput]) {
        await commandHandlers[userInput]();
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é)
    if (userInput.startsWith('‚û°Ô∏è –ß–∞—Ç ') || userInput.startsWith('–ß–∞—Ç ') || userInput.startsWith('–°–ª–æ—Ç ')) {
        const match = userInput.match(/(\d+)/);
        if (match) {
            const slotIndex = parseInt(match[1]) - 1;
            if (slotIndex >= 0 && slotIndex < MAX_CHAT_SLOTS) {
                userState.currentMenu = 'main'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
                // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–∞
                 const currentSlot = userState.slots[slotIndex];
                if (currentSlot.isBanned) {
                    await bot.sendMessage(chatId, '–≠—Ç–æ—Ç —á–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.', { reply_markup: getReplyKeyboard(chatId) });
                    return;
                }
                const oldSlotIndex = userState.activeChatSlot;
                clearIgnoreTimer(chatId, oldSlotIndex);
                if (userState.slots[oldSlotIndex].interactions > 0) setIgnoreTimer(chatId, oldSlotIndex);
                userState.activeChatSlot = slotIndex;
                if (chatHistories[chatId][slotIndex].length === 0 && fs.existsSync(getChatHistoryPath(chatId, slotIndex))) {
                    chatHistories[chatId][slotIndex] = loadChatHistory(chatId, slotIndex);
                }
                clearIgnoreTimer(chatId, slotIndex);
                await bot.sendMessage(chatId, `–í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —á–∞—Ç ${slotIndex + 1}.`, { reply_markup: getReplyKeyboard(chatId) });
                await sendRelationshipStats(bot, chatId, userState.slots[slotIndex]);
            }
        }
        return;
    }
     if (userInput === 'üß† gemini-2.5-pro' || userInput === '‚ö° gemini-2.5-flash') {
        userState.currentMenu = 'main'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const newModel = userInput.includes('pro') ? 'gemini-2.5-pro' : 'gemini-2.5-flash';
        if (userState.selectedModel !== newModel) {
            userState.selectedModel = newModel;
            await bot.sendMessage(chatId, `‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newModel}.`, { reply_markup: getReplyKeyboard(chatId) });
        } else {
             await bot.sendMessage(chatId, '–≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!', { reply_markup: getReplyKeyboard(chatId) });
        }
        return;
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞
    if (slotState.isGenerating) {
        try { await bot.sendMessage(chatId, '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏, —è –µ—â–µ –¥—É–º–∞—é...'); } catch (e) {}
        return;
    }
    
    if (!userState.hasCompletedWelcome) {
        await showWelcomeMessage(chatId);
        return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
    try {
        slotState.isGenerating = true;
        await processUserText(chatId, userInput, msg.message_id);
    } finally {
        slotState.isGenerating = false;
    }
});
// --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–î–ò–ê ---

async function handleVisualMedia(bot, msg) {
    const chatId = msg.chat.id;
    await bot.sendChatAction(chatId, 'typing');
    
    initializeUser(chatId);
    const userState = userStates[chatId];
    if (!userState) {
        console.error(`–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
        return;
    }
    const activeSlotIndex = userState.activeChatSlot;
    const currentSlotState = userState.slots[activeSlotIndex];
    const currentHistory = chatHistories[chatId][activeSlotIndex];

    try {
        let file_id, mime_type, userPrompt;

        if (msg.sticker) {
            if (msg.sticker.is_animated || msg.sticker.is_video) {
                if (!msg.sticker.thumbnail) {
                    await bot.sendMessage(chatId, '–£ —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–µ—Ç –ø—Ä–µ–≤—å—é, –Ω–µ –º–æ–≥—É –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å :(');
                    return;
                }
                file_id = msg.sticker.thumbnail.file_id;
                mime_type = 'image/jpeg';
                userPrompt = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —ç—Ç–æ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ä–µ–ø–ª–∏–∫ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ.';
            } else {
                file_id = msg.sticker.file_id;
                mime_type = 'image/webp';
                userPrompt = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä, –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ —Å–æ–≥–ª–∞—Å–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–∏—Ç—É–∞—Ü–∏–∏: –æ–Ω –ø—Ä–∏—Å–ª–∞–ª —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –∏–ª–∏ –¥–ª—è –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏?.';
            }
        } else if (msg.photo) {
            file_id = msg.photo[msg.photo.length - 1].file_id;
            mime_type = 'image/jpeg';
            userPrompt = msg.caption || '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Ñ–æ—Ç–æ, —Ç—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –æ–ø–∏—Å–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π.';
        } else if (msg.document && msg.document.mime_type.startsWith('image/')) {
            file_id = msg.document.file_id;
            mime_type = msg.document.mime_type;
            userPrompt = msg.caption || '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Ñ–æ—Ç–æ, —Ç—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ –æ–ø–∏—Å–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π';
        } else {
            return;
        }

        const file = await bot.getFile(file_id);
        if (!file || !file.file_path) {
            throw new Error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö Telegram.");
        }

        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
        const imageResponse = await axios.get(fileUrl, { responseType: 'arraybuffer' });

        if (imageResponse.data.length > 4 * 1024 * 1024) {
            await bot.sendMessage(chatId, "üñºÔ∏è –û–π, —ç—Ç–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–º–µ–Ω—å—à–µ.");
            return;
        }

        const base64Image = Buffer.from(imageResponse.data, 'binary').toString('base64');
        const imagePart = { inlineData: { mimeType: mime_type, data: base64Image } };
        const textPart = { text: userPrompt };

        const contents = currentHistory.map(h => ({ role: h.role === 'assistant' ? 'model' : h.role, parts: h.parts }));
        contents.push({ role: 'user', parts: [textPart, imagePart] });

        currentSlotState.interactions++;
        currentSlotState.lastActive = Date.now();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        let fullSystemPrompt = systemPrompt || '';
        if (currentSlotState.characterDescription && currentSlotState.characterDescription.trim() !== '') {
            fullSystemPrompt += `\n\n[–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: "${currentSlotState.characterDescription}"]`;
        }
        if (currentSlotState.userBio && currentSlotState.userBio.trim() !== '') {
            fullSystemPrompt += `\n\n[–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ–≥–æ –±–∏–æ–≥—Ä–∞—Ñ–∏—è): "${currentSlotState.userBio}"]`;
        }

        const selectedModel = userStates[chatId].selectedModel;
        const model = genAI.getGenerativeModel({
            model: selectedModel,
            systemInstruction: fullSystemPrompt || undefined
        });
        console.log(`[–ú–æ–¥–µ–ª—å] –ß–∞—Ç ${chatId} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å: ${selectedModel}`);

        const result = await model.generateContent({ contents });
        const response = await result.response;

        if (!response.candidates?.length) {
            throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API");
        }
        
        let responseText = response.candidates[0].content.parts[0].text;
        console.log(`[DEBUG] –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞ ${chatId}/${activeSlotIndex}: ${responseText}`);

        const isDebug = userStates[chatId].isDebugMode;
        responseText = extractAndRemoveCommands(responseText, currentSlotState, isDebug);

        currentHistory.push({ role: 'user', parts: [textPart, imagePart] });
        currentHistory.push({ role: 'model', parts: [{ text: responseText }] });
        saveChatHistory(chatId, activeSlotIndex, currentHistory);
        
        await sendSplitMessage(bot, chatId, responseText, true);
        await sendRelationshipStats(bot, chatId, currentSlotState);

        setIgnoreTimer(chatId, activeSlotIndex);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error.message);
        if (error.response?.data) console.error('Google API response error:', JSON.stringify(error.response.data));
        await bot.sendMessage(chatId, 'üö´ –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–µ –º–æ–≥—É —ç—Ç–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å.');
    }
}

const ffmpeg = require('fluent-ffmpeg');
const ffmpegPath = require('@ffmpeg-installer/ffmpeg').path;
ffmpeg.setFfmpegPath(ffmpegPath);

async function handleAnimatedMedia(bot, msg) {
    const chatId = msg.chat.id;
    await bot.sendChatAction(chatId, 'typing');

    initializeUser(chatId);
    const userState = userStates[chatId];
    const activeSlotIndex = userState.activeChatSlot;
    const currentSlotState = userState.slots[activeSlotIndex];
    const currentHistory = chatHistories[chatId][activeSlotIndex];

    const tempInputDir = path.join(__dirname, 'temp_in');
    const tempOutputDir = path.join(__dirname, 'temp_out');
    if (!fs.existsSync(tempInputDir)) fs.mkdirSync(tempInputDir);
    if (!fs.existsSync(tempOutputDir)) fs.mkdirSync(tempOutputDir);
    
    let tempInputPath = '';
    let tempOutputPath = '';

    try {
        let file_id, file_extension, userPrompt;

        if (msg.animation) {
            file_id = msg.animation.file_id;
            file_extension = 'mp4';
            userPrompt = msg.caption || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —ç—Ç—É –≥–∏—Ñ–∫—É. –û–ø–∏—à–∏ —Å–≤–æ—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –Ω–µ—ë.';
        } else {
            return;
        }
        
        const fileLink = await bot.getFileLink(file_id);
        const response = await axios({ url: fileLink, responseType: 'arraybuffer' });
        const inputBuffer = Buffer.from(response.data);

        const uniqueId = `${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
        tempInputPath = path.join(tempInputDir, `${uniqueId}.${file_extension}`);
        tempOutputPath = path.join(tempOutputDir, `${uniqueId}.png`);
        fs.writeFileSync(tempInputPath, inputBuffer);
        
        await new Promise((resolve, reject) => {
            ffmpeg(tempInputPath)
                .frames(1)
                .output(tempOutputPath)
                .on('end', () => resolve())
                .on('error', (err) => reject(new Error(`–û—à–∏–±–∫–∞ FFMPEG: ${err.message}`)))
                .run();
        });

        if (!fs.existsSync(tempOutputPath)) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–¥—Ä –∏–∑ –∞–Ω–∏–º–∞—Ü–∏–∏.');
        }

        const imageBuffer = fs.readFileSync(tempOutputPath);
        const base64Image = imageBuffer.toString('base64');
        const imagePart = { inlineData: { mimeType: 'image/png', data: base64Image } };
        const textPart = { text: userPrompt };

        const contents = currentHistory.map(h => ({ role: h.role === 'assistant' ? 'model' : h.role, parts: h.parts }));
        contents.push({ role: 'user', parts: [textPart, imagePart] });

        currentSlotState.interactions++;
        currentSlotState.lastActive = Date.now();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        let fullSystemPrompt = systemPrompt || '';
        if (currentSlotState.characterDescription && currentSlotState.characterDescription.trim() !== '') {
            fullSystemPrompt += `\n\n[–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞: "${currentSlotState.characterDescription}"]`;
        }
        if (currentSlotState.userBio && currentSlotState.userBio.trim() !== '') {
            fullSystemPrompt += `\n\n[–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ–≥–æ –±–∏–æ–≥—Ä–∞—Ñ–∏—è): "${currentSlotState.userBio}"]`;
        }

        const selectedModel = userStates[chatId].selectedModel;
        const model = genAI.getGenerativeModel({
            model: selectedModel,
            systemInstruction: fullSystemPrompt || undefined
        });
        console.log(`[–ú–æ–¥–µ–ª—å] –ß–∞—Ç ${chatId} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å: ${selectedModel}`);

        const result = await model.generateContent({ contents });
        const genResponse = await result.response;

        if (!genResponse.candidates?.length) {
            throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API");
        }
        
        let responseText = genResponse.candidates[0].content.parts[0].text;
        console.log(`[DEBUG] –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —á–∞—Ç–∞ ${chatId}/${activeSlotIndex}: ${responseText}`);

        const isDebug = userStates[chatId].isDebugMode;
        responseText = extractAndRemoveCommands(responseText, currentSlotState, isDebug);

        currentHistory.push({ role: 'user', parts: [textPart, imagePart] });
        currentHistory.push({ role: 'model', parts: [{ text: responseText }] });
        saveChatHistory(chatId, activeSlotIndex, currentHistory);
        
        await sendSplitMessage(bot, chatId, responseText, true);
        await sendRelationshipStats(bot, chatId, currentSlotState);

        setIgnoreTimer(chatId, activeSlotIndex);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error.message);
        await bot.sendMessage(chatId, 'üö´ –£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ù–µ –º–æ–≥—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç—É –∞–Ω–∏–º–∞—Ü–∏—é.');
    } finally {
        if (tempInputPath && fs.existsSync(tempInputPath)) fs.unlinkSync(tempInputPath);
        if (tempOutputPath && fs.existsSync(tempOutputPath)) fs.unlinkSync(tempOutputPath);
    }
}


// –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ó–ê–ú–ï–ù–´
async function handleVoiceMessage(msg) {
    const chatId = msg.chat.id;

    if (!msg.voice) return;

    try {
        await bot.sendMessage(chatId, 'üéôÔ∏è –°–ª—É—à–∞—é —Ç–≤–æ—ë –ì–°, —Å–µ–∫—É–Ω–¥–æ—á–∫—É...');
        await bot.sendChatAction(chatId, 'typing');

        const fileId = msg.voice.file_id;
        const mimeType = msg.voice.mime_type || 'audio/ogg';

        if (msg.voice.file_size > 14 * 1024 * 1024) { // –õ–∏–º–∏—Ç ~15MB, —Å—Ç–∞–≤–∏–º —Å –∑–∞–ø–∞—Å–æ–º
            await bot.sendMessage(chatId, "–û–π, —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–∫–æ—Ä–æ—á–µ.");
            return;
        }
        
        const fileLink = await bot.getFileLink(fileId);
        const response = await axios({ url: fileLink, responseType: 'arraybuffer' });
        const audioBuffer = Buffer.from(response.data);

        // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        const transcribedText = await transcribeAudio(genAI, audioBuffer, mimeType);

        if (transcribedText && transcribedText.length > 0) {
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ ID –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await processUserText(chatId, transcribedText, msg.message_id);
        } else {
            await bot.sendMessage(chatId, '–•–º, –Ω–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å, —á—ë —Ç—ã –≤—è–∫–Ω—É–ª. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.');
        }

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error.message);
        await bot.sendMessage(chatId, 'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

// –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ó–ê–ú–ï–ù–´
// –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –ó–ê–ú–ï–ù–´

// –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú
// –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –¶–ï–õ–ò–ö–û–ú

async function processUserText(chatId, userInput, replyToMessageId) {
    const userState = userStates[chatId];
    const activeSlotIndex = userState.activeChatSlot;
    const currentSlotState = userState.slots[activeSlotIndex];

    if (currentSlotState.isBanned) {
        try {
            await bot.sendMessage(chatId, "–ù—É-–Ω—É, –∫–∞–∂–µ—Ç—Å—è –ì–æ—Ä–µ–ø–æ—á–∫–∞ —É—Å—Ç–∞–ª–∞ –æ—Ç –≤–∞—à–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –±–ª–æ–∫–Ω—É–ª–∞ –≤–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clear –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –Ω–æ–≤—ã–π —á–∞—Ç.");
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–Ω–µ (${chatId}):`, error.message);
        }
        return;
    }

    if (chatHistories[chatId][activeSlotIndex].length === 0 && fs.existsSync(getChatHistoryPath(chatId, activeSlotIndex))) {
        chatHistories[chatId][activeSlotIndex] = loadChatHistory(chatId, activeSlotIndex);
    }
    const currentHistory = chatHistories[chatId][activeSlotIndex];

    // +++ –ë–õ–û–ö –ü–†–û–í–ï–†–ö–ò –°–ü–ê–ú–ê –û–°–¢–ê–ï–¢–°–Ø –ó–î–ï–°–¨ +++
    const internalCommands = ['<–ò–≥–Ω–æ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>', '<–í—Ä–µ–º—è –∑–∞–±—ã—Ç–æ>', '<–í—Ä–µ–º—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ>'];
    if (!internalCommands.includes(userInput)) {
        currentSlotState.spamCounter++;
        if (currentSlotState.spamCounter > 2) {
            try {
                await bot.sendMessage(chatId, '–û–π-–æ–π —Å–ø–∞–º–∏—Ç—å - –Ω–µ —Ö–æ—Ä–æ—à–æ! üò† –ü–æ–¥–æ–∂–¥–∏, –∫–æ–≥–¥–∞ —è –¥–æ–≥–æ–≤–æ—Ä—é.');
            } catch (error) { /* ignore */ }
            return;
        }
    }

    // +++ –ù–ê–ß–ê–õ–û –ö–õ–Æ–ß–ï–í–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô +++
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–π–¥–µ—Ç –≤ API
    let processedInput = userInput;

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –≤—Ä–µ–º—è –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–º–∞–Ω–¥–æ–π
    if (userState.timezoneOffset !== null && !internalCommands.includes(userInput)) {
        const now = new Date();
        // getTimezoneOffset() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö (–¥–ª—è UTC+3 —ç—Ç–æ -180).
        // –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å —ç—Ç–æ —Å–º–µ—â–µ–Ω–∏–µ (—Ç.–∫. –æ–Ω–æ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –∑–Ω–∞–∫–æ–º).
        // new Date() —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–∏—Å—Ç–µ–º—ã, –Ω–æ –µ–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —ç—Ç–æ UTC timestamp.
        // `now.getTime() - (userState.timezoneOffset * 60 * 1000)` - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å timestamp –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        const userTime = new Date(now.getTime() - (userState.timezoneOffset * 60 * 1000));
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC-–º–µ—Ç–æ–¥—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ timestamp –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –ª–æ–∫–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
        const hours = userTime.getUTCHours().toString().padStart(2, '0');
        const minutes = userTime.getUTCMinutes().toString().padStart(2, '0');
        const timeString = `<–í—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${hours}:${minutes}>`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        processedInput = `${timeString}\n\n${userInput}`;
        console.log(`[–í—Ä–µ–º—è] –î–ª—è —á–∞—Ç–∞ ${chatId} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: ${timeString}`);
    }
    
    // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–µ–∑ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã
    currentHistory.push({ role: "user", parts: [{ text: userInput }] });
    currentSlotState.interactions++;
    currentSlotState.lastActive = Date.now();
    
    // +++ –ö–û–ù–ï–¶ –ö–õ–Æ–ß–ï–í–´–• –ò–ó–ú–ï–ù–ï–ù–ò–ô +++


    try {
        await bot.sendChatAction(chatId, 'typing');

        const contents = currentHistory.map(msg => ({
            role: msg.role === "assistant" ? "model" : msg.role,
            parts: JSON.parse(JSON.stringify(msg.parts)) 
        }));
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ö–û–ü–ò–ò –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
        if (contents.length > 0) {
            contents[contents.length - 1].parts[0].text = processedInput;
        }

        const userMessagesCount = currentHistory.filter(m => m.role === 'user').length;
        
        if (currentSlotState.characterDescription && userMessagesCount === 1) {
            const characterInstruction = `(–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –¢–ï–ë–Ø, –ê –ù–ï –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –≠—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —Å —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω—è—Ç—å –∏ –æ—Ç—ã–≥—Ä—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ä–æ–ª—å. –ó–ê–ü–†–ï–©–ï–ù–û –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è —Ä–æ–ª—å: "${currentSlotState.characterDescription}". –ù–∞—á–∏–Ω–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –°–†–ê–ó–£ –≤ —ç—Ç–æ–π —Ä–æ–ª–∏, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.)`;
            
            const lastMessage = contents[contents.length - 1];
            if (lastMessage && lastMessage.role === 'user') {
                lastMessage.parts[0].text = `${characterInstruction}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ä–æ–ª–∏: "${lastMessage.parts[0].text}"`;
                console.log(`[–ò–Ω—ä–µ–∫—Ü–∏—è] –•–∞—Ä–∞–∫—Ç–µ—Ä (${currentSlotState.characterDescription}) –≤–Ω–µ–¥—Ä–µ–Ω –≤ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
            }
        }
        
        let fullSystemPrompt = systemPrompt || '';
        if (currentSlotState.characterDescription && currentSlotState.characterDescription.trim() !== '') {
            fullSystemPrompt += `\n\n[–¢–í–û–ô –•–ê–†–ê–ö–¢–ï–†]: –¢—ã –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ä–æ–ª–∏: "${currentSlotState.characterDescription}"`;
        }
        if (currentSlotState.userBio && currentSlotState.userBio.trim() !== '') {
            fullSystemPrompt += `\n\n[–ë–ò–û–ì–†–ê–§–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø]: –£—á–∏—Ç—ã–≤–∞–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: "${currentSlotState.userBio}"`;
        }

        const selectedModel = userStates[chatId].selectedModel;
        const model = genAI.getGenerativeModel({
            model: selectedModel,
            systemInstruction: fullSystemPrompt || undefined
        });

        const result = await model.generateContent({ contents });
        const response = await result.response;

        if (!response.candidates?.length) throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API");

        let botResponse = response.candidates[0].content.parts[0].text;
        
        botResponse = extractAndRemoveCommands(botResponse, currentSlotState);
        
        currentHistory.push({ role: "model", parts: [{ text: botResponse }] });
        saveChatHistory(chatId, activeSlotIndex, currentHistory);

        currentSlotState.contextSize = currentHistory.length;
        if (currentHistory.length > 100) {
            currentHistory.splice(0, currentHistory.length - 80);
            saveChatHistory(chatId, activeSlotIndex, currentHistory);
            console.log(`–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ ${chatId} —Å–æ–∫—Ä–∞—â–µ–Ω–∞.`);
        }

        await sendSplitMessage(bot, chatId, botResponse, true, replyToMessageId);
        
        currentSlotState.spamCounter = 0;
        await sendRelationshipStats(bot, chatId, currentSlotState);

        setIgnoreTimer(chatId, activeSlotIndex);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º (${chatId}):`, error.message, error.stack);
        currentHistory.pop();
        await bot.sendMessage(chatId, 'üö´ –ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Ü–µ–Ω–∑—É—Ä–∞ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.');
        currentSlotState.spamCounter = 0;
    }
}

async function sendSplitMessage(bot, chatId, originalText, isAiResponseType, replyToMessageId) {
    const isDebugMode = userStates[chatId]?.isDebugMode || false;
    let typingTimer;

    const startTyping = async () => {
        // ... (–∫–æ–¥ —ç—Ç–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        if (typingTimer) clearInterval(typingTimer);
        try {
            if (await isChatValid(chatId)) {
                await bot.sendChatAction(chatId, 'typing');
                typingTimer = setInterval(async () => {
                    try {
                        if (await isChatValid(chatId)) { await bot.sendChatAction(chatId, 'typing'); }
                        else { stopTyping(); }
                    } catch { stopTyping(); }
                }, 4000);
            }
        } catch { /* ignore */ }
    };

    const stopTyping = () => {
        // ... (–∫–æ–¥ —ç—Ç–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        if (typingTimer) { clearInterval(typingTimer); typingTimer = null; }
    };

    await startTyping();

    const messageIds = [];
    let isFirstChunk = true;

    try {
        if (!(await isChatValid(chatId))) { stopTyping(); return []; }

        const createMessageOptions = (textChunk) => {
            const options = { parse_mode: 'Markdown' };
            if (isFirstChunk && replyToMessageId && isAiResponseType && !textChunk.trim().startsWith('```')) {
                options.reply_to_message_id = replyToMessageId;
            }
            return options;
        };

        const sendMessageAndUpdateFlag = async (textChunk) => {
            if (!(await isChatValid(chatId))) return null;

            // --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–ß–ò–°–¢–ö–ê –¢–ï–ö–°–¢–ê –ü–†–û–ò–°–•–û–î–ò–¢ –ó–î–ï–°–¨ ---
            let cleanText = textChunk;
            if (!isDebugMode) {
                // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —É–¥–∞–ª—è–µ–º –í–°–ï –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
                cleanText = cleanText.replace(/<[^>]*>/g, '').trim();
            } else {
                 // –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                 cleanText = cleanText.trim();
            }

            if (!cleanText) return null; // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

            const options = createMessageOptions(cleanText);
            const sent = await bot.sendMessage(chatId, cleanText, options);
            isFirstChunk = false;
            return sent;
        };
        
        // –†–∞–∑–¥–µ–ª—è–µ–º "–≥—Ä—è–∑–Ω—ã–π" —Ç–µ–∫—Å—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ.
        const parts = originalText.split(/<–†–∞–∑–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ>/g);

        for (let i = 0; i < parts.length; i++) {
            const part = parts[i];
            if (!(await isChatValid(chatId))) { stopTyping(); return messageIds; }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∫—É—Å–æ–∫ –∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if (i > 0 && isDebugMode) {
                 await sendMessageAndUpdateFlag('_<–†–∞–∑–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ>_');
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ "–≥—Ä—è–∑–Ω–æ–≥–æ" —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –∫–æ–º–∞–Ω–¥
            const textWithoutCommands = part.replace(/<.*?>/g, '');
            const timePerCharacter = 62;
            const delay = textWithoutCommands.length * timePerCharacter;

            await new Promise(resolve => setTimeout(resolve, delay));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π "–≥—Ä—è–∑–Ω—ã–π" –∫—É—Å–æ–∫ –≤ –Ω–∞—à—É –Ω–æ–≤—É—é —É–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
            const sent = await sendMessageAndUpdateFlag(part);
            if (sent) messageIds.push(sent.message_id);
        }

        stopTyping();
        return messageIds;
    } catch (error) {
        stopTyping();
        if (error.response?.body?.error_code === 403) {
            console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
            if (userStates[chatId]) delete userStates[chatId];
            if (chatHistories[chatId]) delete chatHistories[chatId];
            return [];
        }
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message, error.stack);
        try {
            if (await isChatValid(chatId)) {
                await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç.');
            }
        } catch (sendError) {
            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (${chatId}):`, sendError.message);
        }
        return messageIds;
    }
}

async function handleExport(bot, chatId) {
    try {
        initializeUser(chatId);
        const userState = userStates[chatId];
        const activeSlotIndex = userState.activeChatSlot;

        const currentSlotState = userState.slots[activeSlotIndex];
        const currentHistory = chatHistories[chatId][activeSlotIndex];

        // +++ –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ +++
        // –°–æ–∑–¥–∞–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        const stateToExport = { ...currentSlotState };
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ö–û–ü–ò–ò —Å–≤–æ–π—Å—Ç–≤–æ —Å —Ç–∞–π–º–µ—Ä–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É "circular structure"
        delete stateToExport.ignoreTimer;
        // +++ –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø +++

        // 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        const exportData = {
            exportVersion: 1, // –í–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
            exportedAt: new Date().toISOString(),
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–ß–ò–©–ï–ù–ù–£–Æ –∫–æ–ø–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª–æ—Ç–∞
            slotState: stateToExport,
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ü–û–õ–ù–£–Æ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            history: currentHistory
        };
        
        // 2. –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ JSON –∏ —Å–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const fileContent = JSON.stringify(exportData, null, 2); // null, 2 –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const fileBuffer = Buffer.from(fileContent, 'utf8');

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const fileName = `export_chat_${activeSlotIndex + 1}_${timestamp}.json`;

        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        await bot.sendDocument(chatId, fileBuffer, {}, {
            filename: fileName,
            contentType: 'application/json'
        });

        console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —á–∞—Ç–∞ ${chatId}, —Å–ª–æ—Ç ${activeSlotIndex + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.`);

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error.message);
        await bot.sendMessage(chatId, 'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.');
    }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π JSON-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.
 */
async function processImportFile(bot, msg) {
    const chatId = msg.chat.id;
    initializeUser(chatId);
    const userState = userStates[chatId];
    const activeSlotIndex = userState.activeChatSlot;
    const currentSlotState = userState.slots[activeSlotIndex];

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    currentSlotState.isWaitingForImportFile = false;

    // --- –ë–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---
    if (!msg.document) {
        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–º–µ–Ω–Ω–æ —Ñ–∞–π–ª. –ò–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
        currentSlotState.isWaitingForImportFile = true; // –°–Ω–æ–≤–∞ –∂–¥–µ–º —Ñ–∞–π–ª
        return;
    }

    if (msg.document.mime_type !== 'application/json') {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel.');
        currentSlotState.isWaitingForImportFile = true; // –°–Ω–æ–≤–∞ –∂–¥–µ–º —Ñ–∞–π–ª
        return;
    }
    
    try {
        await bot.sendMessage(chatId, '‚è≥ –ü–æ–ª—É—á–∏–ª–∞ —Ñ–∞–π–ª, –Ω–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∏–º–ø–æ—Ä—Ç...');
        const fileId = msg.document.file_id;
        const fileStream = bot.getFileStream(fileId);
        
        let fileContent = '';
        for await (const chunk of fileStream) {
            fileContent += chunk.toString('utf8');
        }

        const importedData = JSON.parse(fileContent);

        // –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –Ω–∞—à —Ñ–∞–π–ª –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π?
        if (importedData.exportVersion !== 1 || !importedData.slotState || !Array.isArray(importedData.history)) {
             await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.');
             return;
        }

        // --- –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç ---
        
        // 1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ—Ç–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–∞
        // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Object.assign –¥–ª—è "—É–º–Ω–æ–≥–æ" —Å–ª–∏—è–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–∞–π–ª–µ
        userStates[chatId].slots[activeSlotIndex] = Object.assign(getDefaultSlotState(), importedData.slotState);
        // –í–∞–∂–Ω–æ! –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        userStates[chatId].slots[activeSlotIndex].isWaitingForImportFile = false;


        // 2. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –ø–∞–º—è—Ç–∏
        chatHistories[chatId][activeSlotIndex] = importedData.history;

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ –¥–∏—Å–∫
        saveChatHistory(chatId, activeSlotIndex, importedData.history);
        
        // 4. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã "–æ–±–Ω–æ–≤–∏–ª–∏" –¥–∏–∞–ª–æ–≥
        clearIgnoreTimer(chatId, activeSlotIndex);

        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç –¥–ª—è —á–∞—Ç–∞ ${chatId}, —Å–ª–æ—Ç ${activeSlotIndex + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.`);
        await bot.sendMessage(chatId, '‚úÖ –§–∞–π–ª —Å –ø–µ—Ä–µ–ø–∏—Å–∫–æ–π —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω! –¢–≤–æ–π –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ì–æ—Ä–µ–ø–æ—á–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await sendRelationshipStats(bot, chatId, userStates[chatId].slots[activeSlotIndex]);


    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —á–∞—Ç–∞ ${chatId}:`, error.message);
        await bot.sendMessage(chatId, 'üö´ –û–π! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.');
    }
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä Node.js –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`‚ÑπÔ∏è URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: http://localhost:${PORT}`);
});

bot.on('polling_error', (error) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ polling'–∞ Telegram: ${error.code} - ${error.message}`);
});

bot.on('webhook_error', (error) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: ${error.message}`);
});

console.log('‚ÑπÔ∏è –ë–æ—Ç –ì–æ—Ä–µ–ø–æ—á–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...');
